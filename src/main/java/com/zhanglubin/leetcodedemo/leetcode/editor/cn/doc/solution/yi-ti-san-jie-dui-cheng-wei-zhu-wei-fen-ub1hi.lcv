## 「对称位」构造

![image.png](https://pic.leetcode-cn.com/1616992045-iIZbTD-image.png)

一个简单的做法是对输入的 $n$ 做诸位检查。

**如果某一位是 1 的话，则将答案相应的对称位置修改为 1。**

代码：

* []

```Java
public class Solution {
    public int reverseBits(int n) {
        int ans = 0;
        for (int i = 0; i < 32; i++) {
            int t = (n >> i) & 1;
            if (t == 1) {
                ans |= (1 << (31 - i));
            }
        }
        return ans;
    }
}
```

* 时间复杂度：$int$ 固定 32 位，循环次数不随输入样本发生改变。复杂度为 $O(1)$
* 空间复杂度：$O(1)$

***

## 「逐位分离」构造

![image.png](https://pic.leetcode-cn.com/1616992076-abbLNX-image.png)

另外一种做法是，每次都使用 $n$ 的最低一位，使用 $n$ 的最低一位去更新答案的最低一位，使用完将 $n$ 进行右移一位，将答案左移一位。

**相当于每次都用 $n$ 的最低一位更新成 $ans$ 的最低一位。**

**代码（感谢 [@宫水三叶的小迷妹](/u/san_ye_fen/) 同学提供的 python 版本）：**

* []

```Java
public class Solution {
    public int reverseBits(int n) {
        int ans = 0;
        int cnt = 32;
        while (cnt-- > 0) {
            ans <<= 1;
            ans += (n & 1);
            n >>= 1;
        }
        return ans;
    }
}
```

* []

```Python
class Solution:
    def reverseBits(self, n: int) -> int:
        ans = 0
        for i in range(32):
            ans <<= 1
            ans += (n & 1)
            n >>= 1
        return ans
```

* 时间复杂度：$int$ 固定 32 位，循环次数不随输入样本发生改变。复杂度为 $O(1)$
* 空间复杂度：$O(1)$

***

## 「分组互换」

![image.png](https://pic.leetcode-cn.com/1616992100-QmigBE-image.png)

事实上，可以对于长度固定的 $int$ 类型，我们可以使用「分组构造」的方式进行。

**两位互换 -> 四位互换 -> 八位互换 -> 十六位互换。**

**代码（感谢 [@Meteordream](/u/meteordream/) 同学提供的 C++ 版本）：**

* []

```Java
public class Solution {
    public int reverseBits(int n) {
        n = ((n & 0xAAAAAAAA) >>> 1)  | ((n & 0x55555555) << 1);
        n = ((n & 0xCCCCCCCC) >>> 2)  | ((n & 0x33333333) << 2);
        n = ((n & 0xF0F0F0F0) >>> 4)  | ((n & 0x0F0F0F0F) << 4);
        n = ((n & 0xFF00FF00) >>> 8)  | ((n & 0x00FF00FF) << 8);
        n = ((n & 0xFFFF0000) >>> 16) | ((n & 0x0000FFFF) << 16);
        return n;
    }
}
```

* []

```C++
class Solution {
public:
    uint32_t reverseBits(uint32_t n) {
        /* 0xAAAAAAAA = 0b10101010101010101010101010101010 */
        /* 0x55555555 = 0b01010101010101010101010101010101 */
        n = ((n & 0xAAAAAAAA) >> 1) | ((n & 0x55555555) << 1);
        /* 0xCCCCCCCC = 0b11001100110011001100110011001100 */
        /* 0x33333333 = 0b00110011001100110011001100110011*/
        n = ((n & 0xCCCCCCCC) >> 2) | ((n & 0x33333333) << 2);
        /* 0xF0F0F0F0 = 0b11110000111100001111000011110000 */
        /* 0x0F0F0F0F = 0b00001111000011110000111100001111 */
        n = ((n & 0xF0F0F0F0) >> 4) | ((n & 0x0F0F0F0F) << 4);
        /* 0xFF00FF00 = 0b11111111000000001111111100000000 */
        /* 0x00FF00FF = 0b00000000111111110000000011111111 */
        n = ((n & 0xFF00FF00) >> 8) | ((n & 0x00FF00FF) << 8);
        /* 0xFFFF0000 = 0b11111111111111110000000000000000 */
        /* 0x0000FFFF = 0b00000000000000001111111111111111 */
        n = ((n & 0xFFFF0000) >> 16) | ((n & 0x0000FFFF) << 16);
        return n;
    }
};
```

* 时间复杂度：如何进行互换操作取决于 $int$ 长度。复杂度为 $O(1)$
* 空间复杂度：$O(1)$

**PS. 类似的做法我在 [191. 位1的个数](https://leetcode-cn.com/problems/number-of-1-bits/solution/yi-ti-san-jie-wei-shu-jian-cha-you-yi-to-av1r/) 也介绍过。如果大家学有余力的话，建议大家在纸上模拟一下这个过程。如果不想深入，也可以当成模板背过（写法非常固定）。**
**但请不要认为「方法三」一定就比「方法一」等直接采用循环的方式更快。此类做法的最大作用，不是处理 int，而是处理更大位数的情况，在长度只有 32 位的 int 的情况下，该做法不一定就比循环要快（该做法会产生多个的中间结果，导致赋值发生多次，而且由于指令之间存在对 n 数值依赖，可能不会被优化为并行指令），这个道理和对于排序元素少的情况下，我们会选择「冒泡排序」而不是「归并排序」是一样的，因为「冒泡排序」常数更小。**

***

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

**如有不理解的地方，欢迎你在评论区给我留言，我都会逐一回复 ~**

也欢迎你 [关注我](https://leetcode-cn.com/u/ac_oier/) ，提供追求「证明」&「思路」的高质量题解
